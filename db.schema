PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "GLASSES" (
    -- A glass refers to the action of drinking one glass of a given brew
    -- There can also be 'empty' glasses for restaurants, nights, etc.
    Id INTEGER PRIMARY KEY,
    Username TEXT NOT NULL,
    Timestamp DATETIME NOT NULL,
    BrewType TEXT NOT NULL,
    SubType TEXT NOT NULL,
    Location INTEGER,
    Brew INTEGER,
    Price DECIMAL,
    Volume DECIMAL,
    Alc DECIMAL,
    StDrinks DECIMAL

);
CREATE TABLE IF NOT EXISTS "BREWS" (
    Id INTEGER PRIMARY KEY,
    Name TEXT,
    BrewType TEXT NOT NULL,
    SubType TEXT,
    BrewStyle TEXT,
    ProducerLocation INTEGER,
    Alc DECIMAL,
    Country TEXT,
    Region TEXT,
    Flavor TEXT,
    Year DECIMAL,
    Details TEXT
);
CREATE TABLE IF NOT EXISTS "COMMENTS" (
    Id INTEGER PRIMARY KEY,
    Glass INTEGER NOT NULL,
    Comment TEXT,
    Rating INTEGER,
    Person INTEGER,
    Photo TEXT
);
CREATE TABLE IF NOT EXISTS "PERSONS" (
    Id INTEGER PRIMARY KEY,
    Name TEXT NOT NULL,
    FullName TEXT,
    Description TEXT,
    Contact TEXT,
    Location INTEGER,
    RelatedPerson INTEGER
);
CREATE TABLE IF NOT EXISTS "LOCATIONS" (
    Id INTEGER PRIMARY KEY,
    Name TEXT NOT NULL,
    OfficialName TEXT,
    Description TEXT,
    LocType TEXT,
    LocSubType TEXT,
    GeoCoordinates TEXT,
    Website TEXT,
    Contact TEXT,
    Address TEXT,
    Lat REAL,
    Lon REAL);
CREATE INDEX idx_glasses_username ON GLASSES (Username COLLATE NOCASE);
CREATE INDEX idx_glasses_location ON GLASSES (Location);
CREATE INDEX idx_glasses_timestamp ON GLASSES (Timestamp);
CREATE INDEX idx_effdate ON GLASSES(strftime('%Y-%m-%d', Timestamp, '-06:00'));
CREATE INDEX idx_brews_name ON BREWS (Name COLLATE NOCASE);
CREATE INDEX idx_brews_producer_location ON BREWS(ProducerLocation);
CREATE INDEX idx_comments_person ON COMMENTS (Person);
CREATE INDEX idx_comments_glass ON COMMENTS (Glass);
CREATE INDEX idx_persons_name ON PERSONS (Name COLLATE NOCASE);
CREATE INDEX idx_locations_name ON LOCATIONS (Name COLLATE NOCASE);
CREATE VIEW GLASSREC AS
      select
        glasses.id as glassid,
        glasses.username as username,
        datetime(glasses.timestamp) as stamp,
        strftime ('%w', glasses.timestamp, '-06:00' ) as wdaynumber,  /* as number, monday=1 */
        strftime ('%Y-%m-%d', glasses.timestamp) as date,
        strftime ('%Y', glasses.timestamp) as year,
        strftime ('%H:%M:%S', glasses.timestamp) as time,
        glasses.brewtype as type,
        COALESCE(brews.subtype, brews.country) as subtype,
        strftime ('%Y-%m-%d', glasses.timestamp,'-06:00') as effdate,
        LOCATIONS.Id as locid,
        LOCATIONS.name as loc,
        PLOC.name as maker,
        BREWS.Id as brewid,
        BREWS.name as name,
        volume as vol,
        coalesce(Brews.brewstyle,'') || ' ' ||
          coalesce(Brews.region,'')  || ' ' ||
          coalesce(Brews.country,'') || ' ' ||
          coalesce(Brews.details,'') || ' ' ||
          coalesce(Brews.year,'')
          as style,
        glasses.alc as alc,
        price as pr,
        locations.geocoordinates as geo
      from GLASSES , LOCATIONS
      left join BREWS  on glasses.Brew = Brews.id
      left join LOCATIONS PLOC on PLOC.id = Brews.ProducerLocation
      where glasses.Location = Locations.id;
CREATE VIEW COMPERS AS
      select
        comments.glass as id,
        AVG(NULLIF(comments.rating, 0)) AS rate,
        GROUP_CONCAT(comments.Comment, ' | ') AS com,
        COUNT(comments.Id) AS com_cnt,
        GROUP_CONCAT(comments.Photo, '') AS photo,
        COUNT(comments.Id) AS com_cnt,
        GROUP_CONCAT(persons.name, ', ') AS people,
        COUNT(persons.Id) AS pers_cnt
      from COMMENTS
      LEFT JOIN PERSONS on PERSONS.id = COMMENTS.Person
      GROUP BY comments.glass;
CREATE VIEW PERSONS_LIST AS select
    PERSONS.Id,
    PERSONS.Name,
    count(COMMENTS.Id) - 1 as Com,
    strftime ( '%Y-%m-%d %w ', max(GLASSES.Timestamp), '-06:00' ) ||  strftime ( '%H:%M', max(GLASSES.Timestamp)) as Last,
    LOCATIONS.Name as Location
  from PERSONS
  left join COMMENTS on COMMENTS.Person = PERSONS.Id
  left join GLASSES on COMMENTS.Glass = GLASSES.Id
  left join LOCATIONS on LOCATIONS.id = GLASSES.Location
  group by Persons.id;
CREATE VIEW COMMENTS_LIST AS
select
    COMMENTS.Id,
	strftime ( '%Y-%m-%d %w ', GLASSES.Timestamp, '-06:00' ) ||  strftime ( '%H:%M', GLASSES.Timestamp) as Last,
	LOCATIONS.Name as LocName,
	"TR" as TR,
	'' as Clr,

	BREWS.Name as BrewName,
	PLOC.Name as Prod,

	"TR" as TR,

	COMMENTS.Rating as Rate,
    PERSONS.Name as PersonName,
	COMMENTS.Comment as Comment

  from COMMENTS
  left join GLASSES on Glasses.Id = COMMENTS.Glass
  left join BREWS on BREWS.Id = GLASSES.Brew
  left join PERSONS on PERSONS.Id = COMMENTS.Person
  left join LOCATIONS on LOCATIONS.id = GLASSES.Location
  left join LOCATIONS PLOC on PLOC.id = BREWS.ProducerLocation
  order by Last desc;
CREATE VIEW BREW_RATINGS AS
SELECT
    g.brew,
    count(g.brew) as glass_count,
    COUNT(CASE WHEN c.rating IS NOT NULL AND c.rating != '' THEN 1 END) AS rating_count,
    AVG(CASE WHEN c.rating IS NOT NULL AND c.rating != '' THEN c.rating END) AS average_rating,
    COUNT(CASE WHEN c.comment IS NOT NULL AND c.comment != '' THEN 1 END) AS comment_count
FROM
    glasses g
LEFT JOIN
    comments c ON c.glass = g.id
where g.brew is not null
GROUP BY
    g.brew;
CREATE VIEW LOCATIONS_DEDUP_LIST AS select
    LOCATIONS.Id,
	"Chk" as Chk,
    LOCATIONS.Name,
    LOCATIONS.LocType || ", " || LOCATIONS.LocSubType as Type,
    strftime ( '%Y-%m-%d %w ', max(GLASSES.Timestamp), '-06:00' ) ||  strftime ( '%H:%M', max(GLASSES.Timestamp)) as Last
  from LOCATIONS
  left join GLASSES on GLASSES.Location = LOCATIONS.Id
  group by LOCATIONS.Id;
CREATE VIEW LOC_RATINGS as
SELECT
  l.id,
  avg(CASE WHEN g.brew IS NOT NULL THEN c.rating END) as brew_avg,
  count(CASE WHEN g.brew IS NOT NULL THEN c.rating END) as brew_count,
  count(CASE WHEN g.brew IS NOT NULL THEN c.comment END) as brew_comments,
  avg(CASE WHEN g.brew IS NULL THEN c.rating END) as loc_avg,
  count(CASE WHEN g.brew IS NULL THEN c.rating END) as loc_count,
  count(CASE WHEN g.brew IS NULL THEN c.comment END) as loc_comments
from COMMENTS c,
  LOCATIONS l,
  GLASSES g
WHERE c.glass = g.id
and l.id = g.location
and l.loctype <> "Producer"
group by g.location;
CREATE VIEW LOCATION_RATINGS as
SELECT
  l.id,
  count(c.rating) as rating_count,
  avg(c.rating) as rating_average,
  count(c.comment) as comment_count
from COMMENTS c,
  LOCATIONS l,
  GLASSES g
WHERE  g.brew IS NULL
and c.glass = g.id
and l.id = g.location
and l.loctype <> "Producer"
group by g.location;
CREATE VIEW LOCATIONS_LIST AS
select
    LOCATIONS.Id,
    LOCATIONS.Name,
	r.rating_count || ";" || r.rating_average || ";" || r.comment_count as Stats,
    strftime ( '%Y-%m-%d %w ', max(GLASSES.Timestamp), '-06:00' ) ||  strftime ( '%H:%M', max(GLASSES.Timestamp)) as Last,
    LOCATIONS.LocType || ", " || LOCATIONS.LocSubType as Type
  from LOCATIONS
  left join GLASSES on GLASSES.Location = LOCATIONS.Id
  left join LOCATION_RATINGS r on r.id  = GLASSES.Id
  group by LOCATIONS.Id;
CREATE VIEW BREWS_LIST AS
select
    BREWS.Id,
    BREWS.Name,
    PLOC.Name as Producer,
	"TR" as TR,
    BREWS.Alc as Alc,
    BREWS.BrewType || ", " || BREWS.Subtype as Type,
    r.rating_count || ";" || r.average_rating || ";" || r.comment_count as Stats,
    count(GLASSES.Id) as Count,
	"TR" as TR,
	'Clr' as 'Clr',
    strftime ( '%Y-%m-%d %w ', max(GLASSES.Timestamp), '-06:00' ) ||  strftime ( '%H:%M', max(GLASSES.Timestamp)) as Last,
    LOCATIONS.Name as Location
  from BREWS
  left join LOCATIONS PLOC on PLOC.id = BREWS.ProducerLocation
  left join GLASSES on Glasses.Brew = BREWS.Id
  left join LOCATIONS on LOCATIONS.id = GLASSES.Location
  left join BREW_RATINGS r on r.Brew = Brews.Id
  group by BREWS.id;
CREATE VIEW BREWS_DEDUP_LIST AS
SELECT
    BREWS.Id,
	"Chk" as Chk,
    BREWS.Name,
    PLOC.Name as Producer,
    BREWS.Alc as Alc,
    BREWS.BrewType || ", " || BREWS.Subtype as Type,
    strftime ( '%Y-%m-%d %w ', max(GLASSES.Timestamp), '-06:00' ) ||  strftime ( '%H:%M', max(GLASSES.Timestamp)) as Last,
    LOCATIONS.Name as Location,
    r.rating_count || ";" || r.average_rating || ";" || r.comment_count as Stats,
    count(GLASSES.Id) as Count
  from BREWS
  left join LOCATIONS PLOC on PLOC.id = BREWS.ProducerLocation
  left join GLASSES on Glasses.Brew = BREWS.Id
  left join LOCATIONS on LOCATIONS.id = GLASSES.Location
  left join BREW_RATINGS r on r.Brew = BREWS.Id
  group by BREWS.id;
COMMIT;
